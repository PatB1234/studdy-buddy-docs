{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pages","title":"Pages","text":"<p>Click the following links for specific details about the development process: </p> <ul> <li>Backend </li> <li>Frontend</li> <li>Core Functions</li> <li>What I had to learn </li> <li>Improvements</li> </ul> <p>StudyBuddy is a unique app developed by Pratyush Bindal from St. Christopher's School of Bahrain, registered under the MIT License. The app is developed from the ground up (with the essential boilerplate(s)) and aims to revolutionise the learning experience for students in my school by incorporating AI Large-Language models into it. </p> <p>StudyBuddy uses user-created notes to aid the student in revising with interactive approaches such as:</p> <ul> <li>Automatic AI summarising</li> <li>Flashcards generation</li> <li>Question &amp; Answers quizzes to test your knowledge of the notes</li> <li>The ability to ask questions to a knowledgeable source (the AI)</li> </ul> <p>StudyBuddy utilises the new Gemini 2.0-Flash model from google to provide a cost-effective yet intelligent and correct solution.</p>"},{"location":"#how-was-it-built","title":"How was it built?","text":"<p>Rome wasn't built in a day \u2014 neither was StudyBuddy. This is an ongoing project that I started in September of 2024 when I realised that I needed questions to test my knowledge of my notes for an upcoming exam. From there, I began development of the app, which comprises of a few main parts  The backend:  - Built in python with FastAPI &amp; Uvicorn  - Uses sqlite3 for reliable data storage  - Encrypts user passwords with bcrypt cryptography to ensure security  - Uses the Gemini 2.0-Flash API for AI communication  The Frontend:   - Uses AngularJS alongside AngularMaterial to provide a responsive, clean and polished website with ease-of-use for the the user</p>"},{"location":"Backend/","title":"Backend","text":"<p>The backend stores data in a typical SQL-based database. For python, we used sqlite3. This is a lightweight, high-speed and efficient database built for small-medium scale applications such as mine. As I am paying for the server out of pocket, efficient use of storage allocation was a necessity. SQLite fulfilled these requirements and did not deprive me of any modern features to make my code cleaner.</p> <p>To run the application, we used an ASGI server (Asynchronous server gateway interface) to run the API; specifically we used uvicorn. Again, it is lightweight, efficient and can handle asynchronous method calls to allow for an overall faster user experience.</p>"},{"location":"Backend/#data-structures","title":"Data Structures","text":"<p>All of the data sent from the frontend is sent in the form of JSON data. To allow our backend to interpret this, we used custom BaseModels for each POST &amp; GET call. For example, if our frontend called a login function such as:</p> <pre><code>this.http.post(this.URL + \"/check_student_login\", {email: \"example@example.com\", username: \"example\", password: \"example\"}).subscribe((res: any) =&gt; {\n</code></pre> <p>Where <code>email</code>, <code>username</code> and <code>password</code> are the JSON parameters. As a result our backend model would look like:</p> <pre><code>from pydantic import BaseModel # Module to create the models\nclass PostLoginCheckStudentModel(BaseModel):\n\n    email: str  \n    username: str\n    password: str\n</code></pre> <p>And the API would receive the call like so:</p> <pre><code>@app.post(\"/api/check_student_login\")\nasync def check_student_login_post(user: PostLoginCheckStudentModel):\n\n  return check_student_login(user.email, user.password) # Calls a function on the backend\n</code></pre> <p>These Data Structures are repeated throughout the API and are paramount to our data manipulation methods.</p>"},{"location":"Backend/#encryption","title":"Encryption","text":"<p>Firstly, all passwords are encrypted before being stored in the backend. They are encrypted using Passlib's <code>CryptContext</code> module with 'bcrypt' as the schema. The password is encrypted with the following code:</p> <pre><code>from pydantic import BaseModel # Import module\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used \ndef hash_password(password): # Take a plaintext password &amp; convert it to ciphertext\n\n    return pwd_context.hash(password)\n</code></pre> <p>This will encrypt our password. It is extremely secure as each password is non-reversible. This results in the same input string having a variable output hash as the starting 'salt' used by the algorithm will be different. For example, an input password of <code>1234</code> could result in:  - $2b$12$zProG7RawgHpdXZ9RfxYZ.pcwZy4N29C6mRzBb8yAFvoHc5TSSyZC  - $2b$12$0DPNbWZDAX5fJl4pyBHnIuWiLk.2w/rxU/MnuKFznmjouUMjFxW5.  - $2b$12$U6PDFiGrqooLxsnHJ7X9gehpzH3tLiI./BH8oj3HejMSyZvGHPneC  - $2b$12$YJK4L0S8pcFKokWUYqf1VuDtjxy.KptvvBN9VTJIvTPTuwc36KwAe  - $2b$12$MWwHq8PHskJqF2EoGOI60..J92SVyjD5FHVc4Ugbv7ZnD10Wso6yO  - $2b$12$r5qvt.4ik//TSFaVWxWZ3uFGdmUXJL35.FXeeb2uDiWSQSZYQWv0i  With there being a large number of potential passwords based on the starting 'salt'.</p> <p>To verify the value of our password, we do not reverse the hash. This is because reversing the hash is impossible. Instead, we use an inbuilt function that compares the plain-text to the hashed cipher-text. This functionality is used when authenticating a user during login and is done as such:</p> <pre><code>from pydantic import BaseModel # Import module\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used \ndef verify_password(unhashed, hashed): \n\n    return pwd_context.verify(unhashed, hashed) # Returns a boolean\n</code></pre> <p>This function compares the original 'salt' and 'work factor' (Number of encryption iterations) and calculates whether the hash could have been derived from this input. If the algorithm deems it possible, then a boolean value of <code>True</code> is returned, otherwise the function returns <code>False</code>.</p>"},{"location":"Backend/#tokens","title":"Tokens","text":"<p>When the frontend needs to make any request to the backend, it needs to provide a token. This token is valid for 7 days and stores the <code>name</code>, <code>email</code> and <code>id</code> of the user (student) that is currently logged in. </p> <p>When a user attempts to login, the details they input are checked against the database. If the email and password inputted align with an email and password from the database, a token is created and sent to the frontend. The token is created using the code:</p> <pre><code>def get_user_token(student: Student):\n    to_encode = {\n        'details' : {'name': student.name, 'email': student.email, 'id': student.id},\n        'expiry' : str(datetime.utcnow() + timedelta(minutes = ACCESS_TOKEN_EXPIRE_MINUTES))\n\n    }\n    return jwt.encode(to_encode, SECRET_KEY, algorithm = ALGORITHM)\n</code></pre> <p>Where <code>SECRET_KEY</code> is a 256-bit custom code that is used for encryption and the algorithm is HS256. This token is then stored in the user's browser data. As a result of this, the user will not have to log in to the website on every occurrence of accessing the website. The frontend injects this token into every request as shown by the code: </p> <pre><code>@Injectable()\nexport class CookieInterceptor implements HttpInterceptor {\n\n    private platformId = inject(PLATFORM_ID);\n    intercept(request: HttpRequest&lt;unknown&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;unknown&gt;&gt; { // Intercepts an incoming request\n\n        let token: string | undefined;\n        if (isPlatformBrowser(this.platformId)) {\n        token = document.cookie.split(\"; \").find((row) =&gt; row.startsWith(\"token=\"))?.split(\"=\")[1];\n    } // Extracts the token from the web-browser\n\n        const modifiedRequest = request.clone({\n            withCredentials: true,\n            setHeaders: token ? { 'token': token } : {} // Adds the token to the request    \n        });\n\n    return next.handle(modifiedRequest); // Sends the request to the API\n    }\n\n}\n</code></pre> <p>Once the backend receives this token, it then verifies the token in every single function before even executing the intended request of the method call. This is done through the code: </p> <pre><code>@app.post(\"/api/function_name\")\nasync def function_name(request: Request):\n    token_res = validate_student(request.headers.get('token')) # Runs a backend function to validate the token by extracting the user details and checking the expiry of the token\n    if token_res == False:\n\n        return JSONResponse(status_code=401, content={\"message\": \"Invalid token\"}) # Prevents any functions if the token is invalid\n    else:\n\n        # Execute the intended code here\n</code></pre> <p>To validate the token, the code firsts calls the function <code>validate_student()</code>:</p> <pre><code>def validate_student(token):\n    try:\n\n        res = get_student_from_token(token)\n        if res == \"Token Expired\": # Checks if the token is past its expiry date\n\n            return False\n        else:\n\n            # Returns details in the form of a list\n            return [res['name'], res['email'], res['id']]\n            # If the token is invalid, return False\n    except InvalidTokenError: \n\n        return False\n\n    # If the token cannot be decoded, return False\n\n    except InvalidSignatureError: # Checks if the user has tried to use token injection, resulting in an invalid token\n\n        return False\n</code></pre> <p>To get the <code>res</code> variable, our code initially decodes the token using the <code>get_student_from_token(token: str)</code> function:</p> <pre><code>def get_student_from_token(token):\n\n    payload = jwt.decode(token, SECRET_KEY, algorithms = [ALGORITHM])\n    expiry = payload.get('expiry')\n    if datetime.utcnow() &gt;= datetime.strptime(expiry, '%Y-%m-%d %H:%M:%S.%f'): # Compares the expiry date to the current date based on UCT\n\n        return \"Token Expired\"\n    else:\n\n        return payload.get('details') # Returns the details as a dictionary of the name, email and UID\n</code></pre> <p>This means that an expired or invalid token will immediately be rejected but a valid and correct token will be decoded. The app then performs all of its functions based on this data, allowing the app to extract the user's notes based on the <code>OWNER_EMAIL</code> property of each file, ensuring the privacy of user data and maintains the user experience. </p> <p>If the app returns a <code>401</code> error due to a bad token, the frontend intercepts this error and redirects the user to a login/sign-up page, as shown in the code: </p> <pre><code>@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private router: Router, private route: ActivatedRoute) {}\n    getChildRoute(route: ActivatedRoute): ActivatedRoute {  \n        while (route.firstChild) {\n\n            route = route.firstChild;\n        }\n\n        return route;\n    }\n\n    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {\n\n        const modifiedRequest = request.clone({ // Clones any incoming requests\n\n            headers: request.headers.set('X-Requested-With', 'XMLHttpRequest'),\n            withCredentials: true\n        });\n\n        return next.handle(modifiedRequest).pipe( tap(() =&gt; {}, (err: any) =&gt; {\n\n\n            if (err instanceof HttpErrorResponse) { // Checks if we have received an error\n\n                if (err.status != 401 ) {\n\n                    return;\n                }\n\n                this.router.navigate(['/login']); // Prevents the request from going through and redirects to login page instead\n\n            }\n        }));\n\n    }\n\n}\n</code></pre> <p>This all ensures that the user can use the app easily, as they do not have to specify their ID when trying to use the app's functions whilst also preventing bad actors from accessing user data.</p> <p>There is one exception to each API call having a token requirements. This is the <code>cloud_check()</code> function and is used by me to check if the API is responding to API calls. It is a simple <code>get</code> API call: </p> <pre><code>@app.get(\"/api/cloud_check\")\nasync def cloud_check():\n\n    return True\n</code></pre> <p>And was initially used by my service provider to notify me if my API goes down. This is the only potential vulnerability evident to me, and is more dependent on my provider's (Linode) protection to unauthorised IPv6 &amp; IPv4 calls to the server. When calling the method, it should return the following page:</p> <p></p>"},{"location":"Backend/#storing-user-files","title":"Storing user files","text":"<p>When a user uploads a file, it is stored in our backend as a raw .PDF file. These files are not encrypted and are stored as their raw content. Their security is dependent upon the security of our service provider, Linode. The only feasible point of interception is when the file is being transmitted to the Backend from the Frontend.</p> <p>Before even allowing the data to be uploaded, we first have to verify its size. Gemini AI, like other commerical AIs converts input data and prompts to tokens that it can decode and understand. Similarly, input files are converted to tokens. There is a limit to the number of tokens that the AI can handle. To ensure that the files aren't too large (i.e. too many tokens), we use the <code>count_tokens</code> function of the API. This counts the tokens with the code: </p> <pre><code>token_no = client.models.count_tokens(model=model_name,contents=client.files.upload(file=file_path, config={'display_name': 'test_data'})).total_tokens\n</code></pre> <p>We then compare it to the limit, returning a boolean value depending on the result.</p> <p>However, we also have this statement encapsulated in a <code>try...except...</code> loop as if this request fails, then we know that the file is too large so we automatically reject it.</p> <p>NOTE: Files such as handwritten files have a lower capacity as they require more tokens and often cannot be decoded by the AI. To circumvent this, I am working on implementing a form of Vision AI to convert handwritten text to PDF Format. However, this also has its limitations.</p>"},{"location":"Backend/#volatile-data","title":"Volatile Data","text":""},{"location":"Backend/#current-notes","title":"Current Notes","text":"<p>The note that the user currently has selected is stored as a python array, as this allows for quick read/write times and this data does not need to be permanent as the user can simply reselect the notes they are using.</p>"},{"location":"Backend/#caching","title":"Caching","text":"<p>We also have caching in place. Previously, it would take anywhere from 30s - 2min for the flashcard &amp; question-answer functionality to respond. To avoid this, any generated flashcards are stored in an array. Before generating them, the code checks if flashcards for the given notes already exist. If they do, then those flashcards are returned. If not, flashcards are generated and stored.</p> <p>Similarly, the code generates 10 questions at a time and stores them in an array relative to the file. When a question is requested, a question is removed from this list and sent. Once the number of cached questions drops below 3, a new set of questions are requested from the AI. This reduces the wait-time for the user and also makes it more cost-effective on my part as I have to pay for fewer requests, albeit there is a larger size per request.</p>"},{"location":"Backend/#non-volatile-data","title":"Non-volatile data","text":""},{"location":"Backend/#notes","title":"Notes","text":"<p>The notes stored are non-volatile as they are stored as PDF data.</p>"},{"location":"Backend/#login-data","title":"Login Data","text":"<p>User information such as their emails, password and UID's are stored in a sqlite3 database on the SSD of our server</p>"},{"location":"Backend/#tokens_1","title":"Tokens","text":"<p>Tokens are actually stored on the browser, and sent to the backend on a per-request basis. The Backend simply verifies their validity therefore they are considered non-volatile.</p>"},{"location":"Core%20Functions/","title":"Core Functions","text":""},{"location":"Core%20Functions/#summarisations","title":"Summarisations","text":"<p>Firstly, we created the ability for the user to summarise their notes with the click of a button. When the notes are uploaded, the user should simply navigate to the 'Summarise' tab on the NavBar and click summarise (with their notes selected of course) and wait before seeing their notes condensed into a much more digestible format. For example, the user would see the following: </p> <p></p> <p>As you can see, there is also support for Rich Text, which is commonly returned by the AI's API. This allows for easier reading and was implemented later. For more information, view the improvements section</p> <p>To get the AI to summarise, the code was as follows: </p> <pre><code>def summariser(noteID):\n\n    notes = upload_notes(noteID) # Uploads notes to AI as context\n    return (run_prompt(notes, \"Summarise the notes\"))\n</code></pre>"},{"location":"Core%20Functions/#flashcards","title":"Flashcards","text":"<p>For flashcards, we added the data as context and simply asked the AI to return the data as a <code>json</code> object and gave an example of the intended format of the return data. Additionally, we used a data cleaner to remove any additional rich text characteristics as otherwise, our code would not have been able to parse the data. This was done using the following prompt: </p> <pre><code>def flashcards(noteID):\n    for i in range(len(CACHED_FLASHCARDS)): # Initially Checks to see if the flashcards are already present in the Cache\n\n        if CACHED_FLASHCARDS[i][0] == noteID:\n            return CACHED_FLASHCARDS[i][1]\n\n\n    notes = upload_notes(noteID)\n    cards = str((model.generate_content(\n        [notes, \"Make flashcards for the notes given. Make these short flashcards witha back of no more than 20 words. Return the data as a  json object without any additional formatting or rich text backticks/identifiers LISTEN TO ME NO BACKTICS OR IDENTIFIERS do not put the json identifier. A good example of how you should do it is this: [{'Front': 'I am the front of Card 1', 'Back': 'I am the back of Card 1'}, {'Front': 'I am the front of Card 2', 'Back': 'I am the back of Card 2'}d]\"])).text) # This is the prompt\n    flashcards = data_cleaner(cards, True, True) # Cleans data\n    CACHED_FLASHCARDS.append([noteID, flashcards])\n    return flashcards\n</code></pre> <p>The data cleaner's code:</p> <pre><code>def data_cleaner(value, remove_new_line: bool, isJson: bool):  # Just cleans the data\n\n    value = value.strip()\n    value = re.sub('[`]', '', value)\n    if (remove_new_line):\n\n        value = value.replace(\"\\n\", \"\")\n    value = value.title()\n\n    if (isJson):\n\n        value = json.loads(value[value.index(\"[\"):])\n\n    return value\n</code></pre> <p>This is the advantage of AI, as a majority of the data parsing can simply be instructed to the AI as its task, and the AI does it.</p>"},{"location":"Core%20Functions/#question-answers","title":"Question &amp; Answers","text":"<p>When the user requests a question to answer, the backend first checks the cache if there is an existing question deck. If there is, the code pulls a question out and removes it from the deck. If there is no existing deck, the code generates a deck of questions, pulls a question, removes it from the deck and adds it to the cache. If the number of questions in the deck dips below 3, the deck is regenerated. This can be seen by the code below: </p> <pre><code>def make_questions(noteID): \n    curr_questions  = []    \n    iter = -1\n    for i in range(len(CACHED_QUESTIONS)):\n\n        if CACHED_QUESTIONS[i][0] == noteID:\n            curr_questions = CACHED_QUESTIONS[i][1]\n            iter = i\n            break\n\n    if iter == -1:\n\n        CACHED_QUESTIONS.append([noteID, []])\n        iter = len(CACHED_QUESTIONS) - 1\n    if curr_questions == [] or len(curr_questions) &lt; 3: \n\n        notes = upload_notes(noteID)\n        try: \n            res = str((model.generate_content(\n                [notes, f\"Generate 10 questions on these notes. Return the data as a python array without any additional formatting or rich text backticks/identifiers. ONLY GIVE THE QUESTIONS AND NO ANSWERS. DONT REPEAT QUESTIONS YOU HVAE ASKED IN THE CURRENT SESSION\"])).text)\n            res = ast.literal_eval(data_cleaner(res, True, False))\n            CACHED_QUESTIONS[iter][1] = res\n            CACHED_QUESTIONS[iter][1].pop(0)\n            curr_questions = CACHED_QUESTIONS[iter][1]\n            return curr_questions[0]\n        except:\n\n            return \"Error generating questions, please try again in a few minutes\"\n    else:\n\n        CACHED_QUESTIONS[iter][1].pop(0)\n        return curr_questions[0]\n\n</code></pre> <p>When the user wants to check the answer to their question, the backend receives the question, the user's answer and the ID of the file that the question is from. The backend then sends all of this data as context to the AI and asks it to return whether the given answer is valid for the question depending on the context - i.e. the file. This can be seen by the code below: </p> <pre><code>\ndef check_question(question, answer, noteID): \n\n    notes = upload_notes(noteID)\n    res = (model.generate_content(\n        [notes, f\"is the answer {answer} correct for the question {question}\"])).text\n    return res\n\n\n</code></pre> <p>The UI looks as follows: </p>"},{"location":"Core%20Functions/#custom-prompt","title":"Custom Prompt","text":"<p>Here, the user can communicate with the AI as they please using their notes as context. This creates a user-friendly, attractive environment that allows students to expand on the knowledge of their notes. For example, below is an example of the AI creating a Haiku based on their notes, as per the user's request.</p> <p> Additionally, you can stack these responses. Asking a new question will not delete the previous response, unless you reload the page. There is simply a divider that will be placed between the previous response and the current response</p>"},{"location":"Frontend/","title":"Frontend","text":"<p>A well designed API needs a well-designed frontend to allow the user to use the API well. To do this, I had to utilise functions that had the user in mind. This included things such as Angular, Angular Material, and the Google Icon Library.</p>"},{"location":"Frontend/#router","title":"Router","text":"<p>Firstly, we needed to allow users to navigate through the pages. This was done through the use of angular's routers. Angular is a component-based framework. This means that each page is its own component. To allow for navigation and appropriate displaying of the correct component, we have to code the correct paths in. This is done like so:</p> <pre><code>export const routes: Routes = [\n    {\n        path: '',\n        component: DashboardComponent  // DASHBOARD COMPONENT\n    },\n    {\n        path: 'custom-prompt', \n        component: CustomPromptComponent\n    },\n    {\n        path: 'flashcards',\n        component: FlashcardsComponent\n    },\n    {\n        path: 'question-answer',\n        component: QuestionAnswerComponent\n    }, \n    {\n        path: 'summariser',\n        component: SummariserComponent\n    },\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    {\n        path: 'sign-up',\n        component: SignUpComponent\n    },\n    {\n        path: 'student-profile',\n        component: ViewStudentProfileComponent\n    },\n    {\n        path: 'add-section',\n        component: AddSectionComponent\n    }\n];\n</code></pre> <p>Where each path is the URL path. So the <code>FlashcardComponent</code> could be found at the URL https://studdybuddy.app/flashcards</p> <p>This also allows for navigation within the code. For example, if a user is not logged in, the code automatically navigates them to the login page with the code: <code>this.router.navigate(['/login']);</code></p>"},{"location":"Frontend/#interceptors","title":"Interceptors","text":"<p>When something is not correct, for example if a user is not logged in or there is an error returned by the backend, the code has to intercept it to ensure that the frontend does not display these errors and allow them to correct the mistake without confusing them.</p>"},{"location":"Frontend/#cookie","title":"Cookie","text":"<p>Firstly, we have the cookie interceptor component. The code is:</p> <pre><code>import { Injectable, inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class CookieInterceptor implements HttpInterceptor {\n  private platformId = inject(PLATFORM_ID);\n\n  intercept(request: HttpRequest&lt;unknown&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;unknown&gt;&gt; {\n    let token: string | undefined;\n\n    if (isPlatformBrowser(this.platformId)) {\n      token = document.cookie.split(\"; \")\n        .find((row) =&gt; row.startsWith(\"token=\"))\n        ?.split(\"=\")[1];\n    }\n\n    const modifiedRequest = request.clone({\n      withCredentials: true,\n      setHeaders: token ? { 'token': token } : {}\n    });\n\n    return next.handle(modifiedRequest);\n  }\n}\n</code></pre> <p>This code extracts a token from the user's browser storage and automatically adds it to every request that is sent. This ensure that the user is authenticated to prevent injection to the Gemini API.</p>"},{"location":"Frontend/#error","title":"Error","text":"<p>If the backend returns an error, particularly a 401 error indicating that a user is not logged in (from an invalid cookie), the frontend intercepts it to prevent the app from stopping or halting. The code is:</p> <pre><code>import { Injectable } from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n    HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router , ActivatedRoute, NavigationEnd} from '@angular/router';\nimport {tap, filter} from 'rxjs/operators';\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n    constructor(private router: Router, private route: ActivatedRoute) {}\n    getChildRoute(route: ActivatedRoute): ActivatedRoute {\n        while (route.firstChild) {\n            route = route.firstChild;\n        }\n        return route;\n        }\n    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {\n\n        const modifiedRequest = request.clone({\n            headers: request.headers.set('X-Requested-With', 'XMLHttpRequest'),\n            withCredentials: true\n        });\n\n\n        return next.handle(modifiedRequest).pipe( tap(() =&gt; {}, (err: any) =&gt; {\n\n            if (err instanceof  HttpErrorResponse) {\n\n                if (err.status != 401 ) {\n\n                    return;\n                }\n\n                this.router.navigate(['/login']);\n            }\n        }));\n    }\n}\n</code></pre> <p>Here, the code intercepts all incoming requests. If the response has a code of 401, it automatically redirects to the login page and discards the contents of the request. This prevents an error from reaching the user and causing the app to halt.</p>"},{"location":"Frontend/#snackbars","title":"Snackbars","text":"<p>Some of these requests take time before the AI can respond. To let the user know, I used Angular-Material's snackbars to prevent the user from leaving the page prematurely due to a request taking time. For example, below is the snackbar that appears when a user requests to create flashcards.</p> <p></p> <p>This is the snackbar that appears when the user tries to create flashcards, ensuring that the user is not confused by wait times.</p> <p>Additionally, the snackbar can also be used to display errors. For example, if the user does not have an existing account and tries to login, the app returns a separate snackbar, as shown below:  This indicates to the user that they need to sign in.</p>"},{"location":"Frontend/#flashcards","title":"Flashcards","text":"<p>When the flashcards are requested, we use a custom-built component that was taken from a StackBlitz repository to display them. This can be seen below:  This creates a friendly environment for the user to interact with their flashcards. There is a display of the flashcard they are currently looking at and there is buttons to flip between the various flashcards. Additionally, the user can just click the flashcard to view its behind side.</p>"},{"location":"Frontend/#animations","title":"Animations","text":"<p>When flipping between the sides of the flashcards, there is an animations which can be seen below:   This brings a better user experience as it adds fluidity to the app. The code to do this is the following:</p> <pre><code>  animations: [\n        trigger('flipState', [ // Triggered when the user clicks the flashcards\n          state('active', style({\n            transform: 'rotateY(179deg)'\n          })),\n          state('inactive', style({\n            transform: 'rotateY(0)'\n          })),\n          transition('active =&gt; inactive', animate('500ms ease-out')),\n          transition('inactive =&gt; active', animate('500ms ease-in'))\n        ])\n      ]\n</code></pre>"},{"location":"Frontend/#http-requests","title":"HTTP Requests","text":"<p>Every single component makes an HTTP request. We do this with the general format of the GET/POST Request as shown in the code below:</p> <pre><code>// For a POST Request\nthis.http.post(this.URL + \"API_REQUEST\", DATA).subscribe((res: any) =&gt; {\n\n})  \n\n// For a GET Request\nthis.http.get(this.URL + \"/API_REQUEST\").subscribe((res: any) =&gt; {\n\n})\n</code></pre>"},{"location":"Frontend/#angular-material","title":"Angular Material","text":"<p>I wanted the app to look good. To do this, I used premade components from a proprietary npm module called Angular Material. From here, I have taken various components such as: </p> <ul> <li>The NavBar   </li> <li>The Side Tree  </li> <li>The aforementioned snack bar  And many more</li> </ul> <p>This creates fluidity and cleanliness in the app and also adds a dynamic layer as these components are scaleable to the size of their display, creating a better user experience</p>"},{"location":"Frontend/#icons","title":"Icons","text":"<p>I used the google Icon library to simplify the purpose of some buttons into images rather than words to reduce the page's clutter. They have been used in various places such as: - The menu Row   - Each node on the side bar  </p>"},{"location":"Improvements/","title":"Improvements","text":""},{"location":"Improvements/#snack-bar-addition","title":"Snack Bar addition","text":""},{"location":"Improvements/#increased-speed","title":"Increased Speed","text":""},{"location":"Improvements/#flashcard-caching","title":"Flashcard Caching","text":""},{"location":"Improvements/#question-answer-caching","title":"Question &amp; Answer Caching","text":""},{"location":"Improvements/#gdpr-alignment","title":"GDPR Alignment","text":""},{"location":"Improvements/#account-deletion","title":"Account Deletion","text":""},{"location":"Improvements/#note-deletion","title":"Note Deletion","text":""},{"location":"Improvements/#rich-text-support","title":"Rich Text support","text":""},{"location":"Improvements/#gunicorn","title":"Gunicorn","text":""},{"location":"Improvements/#ng-build","title":"ng build","text":""},{"location":"Improvements/#github-actions","title":"Github actions","text":""},{"location":"Learning/","title":"Learning","text":""},{"location":"Learning/#angular","title":"Angular","text":"<p>To build this app, I had to decide on a framework of development. It was possible to build this from the ground up using HTML, CSS &amp; plain JS, but then I would loose the creature comforts that a well-designed framework brings such as scalability to screen-size, well designed premade components and a wide community that creates a support system when the average person begins their development journey.</p> <p>I vetted a few main frameworks and listed their Pros &amp; Cons below:</p> Framework name Pros Cons Angular - Full-featured framework with built-in routing, HTTP, and forms  - Powerful CLI and tooling   - TypeScript-first approach   - Backed by Google  - Steep learning curve   - Verbose syntax and boilerplate   - Larger bundle sizes React - Component-based and flexible   - Large ecosystem and community   - Rich set of third-party libraries   - Backed by Meta  - Just a UI library, requires external tools for full setup  - Frequent updates and breaking changes  - Boilerplate for state management Next.js - Built on top of React with full-stack features   - Server-side rendering (SSR) and static site generation (SSG)   - File-based routing   - Optimized performance and SEO  - Opinionated structure may not suit every project  - Learning curve if new to React or SSR  - Some features behind enterprise licenses Svelte - Truly reactive and minimal boilerplate  - Compiles to vanilla JS (no virtual DOM)   - Fast performance and small bundle size  - Great developer experience  - Smaller ecosystem and community  - Less mature than React/Angular  - Fewer integrations and tooling options"},{"location":"Learning/#ultimately-i-decided-on-going-with-angular-this-is-because-of-a-few-reasons","title":"Ultimately, I decided on going with angular. This is because of a few reasons:","text":"<ul> <li>I had previous experience with the framework </li> <li>It was made by google, so I though integrating Gemini &amp; other google frameworks/APIs would be easier </li> <li>Had a good community </li> <li>Was less module-dependent compared to Angular, allowing for smoother development with a smaller build package.   This decision proved to be well-founded, as I was able to scale the app very well as I added more components, native and custom alike.</li> </ul>"},{"location":"Learning/#nginx","title":"NGINX","text":"<p>Once we get the code, I had to run it on a server and expose it to a port. For the backend, I initially used uvicorn with the <code>--port 8000</code> flag but moved to gunicorn with 4 workers to increase website speed and allow asynchronous requests to the backend. For the frontend, initially we used ng serve with the <code>--port 4200</code> flag but moved to <code>ng build</code> and a static web-server with nginx to run our frontend. This, again, increased website performance &amp; speed while also maintaining user experience by preventing an error from halting the entire website. My nginx file is:</p> <pre><code>server {\n    listen 80;\n    server_name studdybuddy.app;\n    client_max_body_size 100M;\n\n    location / {\n    return 301 https://$host$request_uri;\n    }\n\n\n    location /api/ {\n\n            return 301 https://127.0.0.1:8000;\n    }\n}\n\nserver {\n    listen 443 ssl;\n    server_name studdybuddy.app;\n    client_max_body_size 100M;\n\n    ssl_certificate /etc/letsencrypt/live/studdybuddy.app/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/studdybuddy.app/privkey.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    root /root/StudyBuddy/study-buddy/dist/study-buddy/browser;\n\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n  location /api/ {\n\n        proxy_pass http://127.0.0.1:8000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n}\n}\n</code></pre> <p> Firstly, on the top we have the http:// requests. They automatically redirect to the https variant as that is much more secure. Secondly, to enable SSL/TLS in the same place, I had to use <code>certbot</code> to create a certificate that would auto-renew. Then, I had to force upgrade all calls to the /api/ to SSL/TLS. Furthermore, I had to increase the size of each request to a maximum of 100 Megabytes to account for any large files/notes that the user may upload and ensure that they get passed through.</p> <p>This is a very conventional and standardised way of running a dual-server website (Backend &amp; Frontend) on one machine with only one domain name. Additionally, it is very efficient and quick and taught me a lot about industry standards when it comes to deployment</p>"},{"location":"Learning/#nohup","title":"Nohup","text":""},{"location":"Learning/#encryption","title":"Encryption","text":""},{"location":"Learning/#jwt","title":"JWT","text":""},{"location":"Learning/#tokens","title":"Tokens","text":""}]}