{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to StuddyBuddy To visit StuddyBuddy, go to studdybuddy.app . Viewing Click on the tabs above to view the documentation and development process for this app","title":"Welcome to StuddyBuddy"},{"location":"#welcome-to-studdybuddy","text":"To visit StuddyBuddy, go to studdybuddy.app .","title":"Welcome to StuddyBuddy"},{"location":"#viewing","text":"Click on the tabs above to view the documentation and development process for this app","title":"Viewing"},{"location":"Introduction/","text":"StudyBuddy is a unique app developed by Pratyush Bindal from St. Christopher's School of Bahrain, registered under the MIT License. The app is developed from the ground up (with the essential boilerplate(s)) and aims to revolutionise the learning experience for students in my school by incorporating AI Large-Language models into it. StudyBuddy uses user-created notes to aid the student in revising with interactive approaches such as: Automatic AI summarising Flashcards generation Question & Answers quizzes to test your knowledge of the notes The ability to ask questions to a knowledgeable source (the AI) StudyBuddy utilises the new Gemini 2.0-Flash model from google to provide a cost-effective yet intelligent and correct solution. How was it built? Rome wasn't built in a day \u2014 neither was StudyBuddy. This is an ongoing project that I started in September of 2024 when I realised that I needed questions to test my knowledge of my notes for an upcoming exam. From there, I began development of the app alongside my mentor. The app comprises of a few main parts The backend: - Built in python with FastAPI & Uvicorn - Uses sqlite3 for reliable data storage - Encrypts user passwords with bcrypt cryptography to ensure security - Uses the Gemini 2.0-Flash API for AI communication The Frontend: - Uses AngularJS alongside AngularMaterial to provide a responsive, clean and polished website with ease-of-use for the the user User Safety When using new and ever-evolving technologies such as that of AI, safety is a paramount concern. To aid this, AI never accesses, views, or receives any personally identifiable user data. All it gets in the context (User-provided notes) and the prompt (e.g. \"Make me some flashcards\"). Additionally, user data never leaves the server in a non-encrypted form. Any sensitive user info (Name, email, DOB) are all sent via an encrypted, expiring token that can only be decrypted on the user's computer and our server.","title":"Introduction"},{"location":"Introduction/#how-was-it-built","text":"Rome wasn't built in a day \u2014 neither was StudyBuddy. This is an ongoing project that I started in September of 2024 when I realised that I needed questions to test my knowledge of my notes for an upcoming exam. From there, I began development of the app alongside my mentor. The app comprises of a few main parts The backend: - Built in python with FastAPI & Uvicorn - Uses sqlite3 for reliable data storage - Encrypts user passwords with bcrypt cryptography to ensure security - Uses the Gemini 2.0-Flash API for AI communication The Frontend: - Uses AngularJS alongside AngularMaterial to provide a responsive, clean and polished website with ease-of-use for the the user","title":"How was it built?"},{"location":"Introduction/#user-safety","text":"When using new and ever-evolving technologies such as that of AI, safety is a paramount concern. To aid this, AI never accesses, views, or receives any personally identifiable user data. All it gets in the context (User-provided notes) and the prompt (e.g. \"Make me some flashcards\"). Additionally, user data never leaves the server in a non-encrypted form. Any sensitive user info (Name, email, DOB) are all sent via an encrypted, expiring token that can only be decrypted on the user's computer and our server.","title":"User Safety"},{"location":"Developer%20Talk/Backend/","text":"The backend is built using Python 3.12.2 . This is not the latest release at the time, however I found it to be the most stable. I realised that newer version often have stability issues that cause them to crash or have problems that result in some core functionality not working as intended. To avoid this hassle, I chose a version that I have worked with before, as it would have support for all the packages required whilst also remaining stable, ensuring app & user quality. The backend stores data in a typical SQL-based database. For python, we used sqlite3 . This is a lightweight, high-speed and efficient database built for small-medium scale applications such as ours. As I am paying for the server out of pocket, efficient use of storage allocation was a necessity. SQLite fulfilled these requirements and did not deprive me of any modern features to make my code cleaner. To run the application, we used an ASGI (Asynchronous server gateway interface) to run the API, specifically we used uvicorn . Again, it is lightweight, efficient and can handle asynchronous calls to allow for an overall faster user experience. Data Structures All of the data sent from the frontend was sent in the form of JSON. To allow our backend to interpret this, we used custom BaseModels for each POST & GET call. For example, if our frontend called a login function such as: this.http.post(this.URL + \"/check_student_login\", {email: \"example@example.com\", username: \"example\", password: \"example\"}).subscribe((res: any) => { Where, email , username and password are the JSON parameters, then our backend model would look like: from pydantic import BaseModel # Module to create the models class PostLoginCheckStudentModel(BaseModel): email: str username: str password: str And the API would receive the call like so: @app.post(\"/api/check_student_login\") async def check_student_login_post(user: PostLoginCheckStudentModel): return check_student_login(user.email, user.password) # Calls a function on the backend These Data Structures are repeated throughout the API and are paramount to our data manipulation methods. Encryption Firstly, all passwords are encrypted before being stored in the backend. They are encrypted using Passlib's CryptContext module with 'bcrypt' as the schema. The password is encrypted with the following code: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def hash_password(password): # Take a plaintext password & convert it to ciphertext return pwd_context.hash(password) This will encrypt our password. It is extremely secure as each password is non-reversible. This results in the same input string having a variable output hash as the starting 'salt' used by the algorithm will be different. For example, an input password of 1234 could result in: - $2b$12$zProG7RawgHpdXZ9RfxYZ.pcwZy4N29C6mRzBb8yAFvoHc5TSSyZC - $2b$12$0DPNbWZDAX5fJl4pyBHnIuWiLk.2w/rxU/MnuKFznmjouUMjFxW5. - $2b$12$U6PDFiGrqooLxsnHJ7X9gehpzH3tLiI./BH8oj3HejMSyZvGHPneC - $2b$12$YJK4L0S8pcFKokWUYqf1VuDtjxy.KptvvBN9VTJIvTPTuwc36KwAe - $2b$12$MWwHq8PHskJqF2EoGOI60..J92SVyjD5FHVc4Ugbv7ZnD10Wso6yO - $2b$12$r5qvt.4ik//TSFaVWxWZ3uFGdmUXJL35.FXeeb2uDiWSQSZYQWv0i With there being an almost infinite number of potential passwords based on the starting 'salt'. To verify the value of our password, we do not reverse the hash. This is because reversing the hash is impossible. Instead, we use an inbuilt function that compares the plain-text to the hashed cipher-text. This functionality is used when authenticating a user during login and is done like such: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def verify_password(unhashed, hashed): return pwd_context.verify(unhashed, hashed) # Returns a boolean This function compares the original 'salt' and 'work factor' (Number of encryption iterations) and calculates whether the hash could have been derived from this input. If the algorithm deems it possible, then a boolean value of True is returned, otherwise the function returns False .","title":"Backend"},{"location":"Developer%20Talk/Backend/#data-structures","text":"All of the data sent from the frontend was sent in the form of JSON. To allow our backend to interpret this, we used custom BaseModels for each POST & GET call. For example, if our frontend called a login function such as: this.http.post(this.URL + \"/check_student_login\", {email: \"example@example.com\", username: \"example\", password: \"example\"}).subscribe((res: any) => { Where, email , username and password are the JSON parameters, then our backend model would look like: from pydantic import BaseModel # Module to create the models class PostLoginCheckStudentModel(BaseModel): email: str username: str password: str And the API would receive the call like so: @app.post(\"/api/check_student_login\") async def check_student_login_post(user: PostLoginCheckStudentModel): return check_student_login(user.email, user.password) # Calls a function on the backend These Data Structures are repeated throughout the API and are paramount to our data manipulation methods.","title":"Data Structures"},{"location":"Developer%20Talk/Backend/#encryption","text":"Firstly, all passwords are encrypted before being stored in the backend. They are encrypted using Passlib's CryptContext module with 'bcrypt' as the schema. The password is encrypted with the following code: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def hash_password(password): # Take a plaintext password & convert it to ciphertext return pwd_context.hash(password) This will encrypt our password. It is extremely secure as each password is non-reversible. This results in the same input string having a variable output hash as the starting 'salt' used by the algorithm will be different. For example, an input password of 1234 could result in: - $2b$12$zProG7RawgHpdXZ9RfxYZ.pcwZy4N29C6mRzBb8yAFvoHc5TSSyZC - $2b$12$0DPNbWZDAX5fJl4pyBHnIuWiLk.2w/rxU/MnuKFznmjouUMjFxW5. - $2b$12$U6PDFiGrqooLxsnHJ7X9gehpzH3tLiI./BH8oj3HejMSyZvGHPneC - $2b$12$YJK4L0S8pcFKokWUYqf1VuDtjxy.KptvvBN9VTJIvTPTuwc36KwAe - $2b$12$MWwHq8PHskJqF2EoGOI60..J92SVyjD5FHVc4Ugbv7ZnD10Wso6yO - $2b$12$r5qvt.4ik//TSFaVWxWZ3uFGdmUXJL35.FXeeb2uDiWSQSZYQWv0i With there being an almost infinite number of potential passwords based on the starting 'salt'. To verify the value of our password, we do not reverse the hash. This is because reversing the hash is impossible. Instead, we use an inbuilt function that compares the plain-text to the hashed cipher-text. This functionality is used when authenticating a user during login and is done like such: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def verify_password(unhashed, hashed): return pwd_context.verify(unhashed, hashed) # Returns a boolean This function compares the original 'salt' and 'work factor' (Number of encryption iterations) and calculates whether the hash could have been derived from this input. If the algorithm deems it possible, then a boolean value of True is returned, otherwise the function returns False .","title":"Encryption"}]}