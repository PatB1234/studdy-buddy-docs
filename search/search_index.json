{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"StudyBuddy is a unique app developed by Pratyush Bindal from St. Christopher's School of Bahrain, registered under the MIT License. The app is developed from the ground up (with the essential boilerplate(s)) and aims to revolutionise the learning experience for students in my school by incorporating AI Large-Language models into it. StudyBuddy uses user-created notes to aid the student in revising with interactive approaches such as: Automatic AI summarising Flashcards generation Question & Answers quizzes to test your knowledge of the notes The ability to ask questions to a knowledgeable source (the AI) StudyBuddy utilises the new Gemini 2.0-Flash model from google to provide a cost-effective yet intelligent and correct solution. How was it built? Rome wasn't built in a day \u2014 neither was StudyBuddy. This is an ongoing project that I started in September of 2024 when I realised that I needed questions to test my knowledge of my notes for an upcoming exam. From there, I began development of the app alongside my mentor. The app comprises of a few main parts The backend: - Built in python with FastAPI & Uvicorn - Uses sqlite3 for reliable data storage - Encrypts user passwords with bcrypt cryptography to ensure security - Uses the Gemini 2.0-Flash API for AI communication The Frontend: - Uses AngularJS alongside AngularMaterial to provide a responsive, clean and polished website with ease-of-use for the the user Pages Click the following links for specific details about the development process: Backend Frontend Improvements Core Functions What I had to learn","title":"Home"},{"location":"#how-was-it-built","text":"Rome wasn't built in a day \u2014 neither was StudyBuddy. This is an ongoing project that I started in September of 2024 when I realised that I needed questions to test my knowledge of my notes for an upcoming exam. From there, I began development of the app alongside my mentor. The app comprises of a few main parts The backend: - Built in python with FastAPI & Uvicorn - Uses sqlite3 for reliable data storage - Encrypts user passwords with bcrypt cryptography to ensure security - Uses the Gemini 2.0-Flash API for AI communication The Frontend: - Uses AngularJS alongside AngularMaterial to provide a responsive, clean and polished website with ease-of-use for the the user","title":"How was it built?"},{"location":"#pages","text":"Click the following links for specific details about the development process: Backend Frontend Improvements Core Functions What I had to learn","title":"Pages"},{"location":"Backend/","text":"The backend is built using Python 3.12.2 . This is not the latest release at the time, however I found it to be the most stable. I realised that newer version often have stability issues that cause them to crash or have problems that result in some core functionality not working as intended. To avoid this hassle, I chose a version that I have worked with before, as it would have support for all the packages required whilst also remaining stable, ensuring app & user quality. The backend stores data in a typical SQL-based database. For python, we used sqlite3 . This is a lightweight, high-speed and efficient database built for small-medium scale applications such as ours. As I am paying for the server out of pocket, efficient use of storage allocation was a necessity. SQLite fulfilled these requirements and did not deprive me of any modern features to make my code cleaner. To run the application, we used an ASGI (Asynchronous server gateway interface) to run the API, specifically we used uvicorn . Again, it is lightweight, efficient and can handle asynchronous calls to allow for an overall faster user experience. Data Structures All of the data sent from the frontend was sent in the form of JSON. To allow our backend to interpret this, we used custom BaseModels for each POST & GET call. For example, if our frontend called a login function such as: this.http.post(this.URL + \"/check_student_login\", {email: \"example@example.com\", username: \"example\", password: \"example\"}).subscribe((res: any) => { Where, email , username and password are the JSON parameters, then our backend model would look like: from pydantic import BaseModel # Module to create the models class PostLoginCheckStudentModel(BaseModel): email: str username: str password: str And the API would receive the call like so: @app.post(\"/api/check_student_login\") async def check_student_login_post(user: PostLoginCheckStudentModel): return check_student_login(user.email, user.password) # Calls a function on the backend These Data Structures are repeated throughout the API and are paramount to our data manipulation methods. Encryption Firstly, all passwords are encrypted before being stored in the backend. They are encrypted using Passlib's CryptContext module with 'bcrypt' as the schema. The password is encrypted with the following code: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def hash_password(password): # Take a plaintext password & convert it to ciphertext return pwd_context.hash(password) This will encrypt our password. It is extremely secure as each password is non-reversible. This results in the same input string having a variable output hash as the starting 'salt' used by the algorithm will be different. For example, an input password of 1234 could result in: - $2b$12$zProG7RawgHpdXZ9RfxYZ.pcwZy4N29C6mRzBb8yAFvoHc5TSSyZC - $2b$12$0DPNbWZDAX5fJl4pyBHnIuWiLk.2w/rxU/MnuKFznmjouUMjFxW5. - $2b$12$U6PDFiGrqooLxsnHJ7X9gehpzH3tLiI./BH8oj3HejMSyZvGHPneC - $2b$12$YJK4L0S8pcFKokWUYqf1VuDtjxy.KptvvBN9VTJIvTPTuwc36KwAe - $2b$12$MWwHq8PHskJqF2EoGOI60..J92SVyjD5FHVc4Ugbv7ZnD10Wso6yO - $2b$12$r5qvt.4ik//TSFaVWxWZ3uFGdmUXJL35.FXeeb2uDiWSQSZYQWv0i With there being an almost infinite number of potential passwords based on the starting 'salt'. To verify the value of our password, we do not reverse the hash. This is because reversing the hash is impossible. Instead, we use an inbuilt function that compares the plain-text to the hashed cipher-text. This functionality is used when authenticating a user during login and is done like such: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def verify_password(unhashed, hashed): return pwd_context.verify(unhashed, hashed) # Returns a boolean This function compares the original 'salt' and 'work factor' (Number of encryption iterations) and calculates whether the hash could have been derived from this input. If the algorithm deems it possible, then a boolean value of True is returned, otherwise the function returns False . Tokens When the frontend needs to make any request to the backend, it needs to provide a token. This token is valid for 7 days and stores the name , email and id of the user (student) that is currently logged in. When a user attempts to login, the details they input are checked against our database. If the email and password inputted align with an email and password from the database, a token is created and sent to the fronted. The token is created using the code: def get_user_token(student: Student): to_encode = { 'details' : {'name': student.name, 'email': student.email, 'id': student.id}, 'expiry' : str(datetime.utcnow() + timedelta(minutes = ACCESS_TOKEN_EXPIRE_MINUTES)) } return jwt.encode(to_encode, SECRET_KEY, algorithm = ALGORITHM) Where SECRET_KEY is a 256-bit custom code that is used for encryption and the algorithm is HS256. This token is then stored in the frontend. As a result of this, the user will not have to log in to the website on every occurrence of accessing the website. The fronted injects this token into every request as shown by the code: @Injectable() export class CookieInterceptor implements HttpInterceptor { private platformId = inject(PLATFORM_ID); intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> { // Intercepts an incoming request let token: string | undefined; if (isPlatformBrowser(this.platformId)) { token = document.cookie.split(\"; \").find((row) => row.startsWith(\"token=\"))?.split(\"=\")[1]; } // Extracts the token from the web-browser const modifiedRequest = request.clone({ withCredentials: true, setHeaders: token ? { 'token': token } : {} // Adds the token to the request }); return next.handle(modifiedRequest); // Sends the request to the API } } Once the backend receives this token, it then verifies it in every single function before even executing the intended request of the method call. This is done through the code: @app.post(\"/api/function_name\") async def function_name(request: Request): token_res = validate_student(request.headers.get('token')) # Runs a backend function to validate the token by extracting the user details and checking the expiry of the token if token_res == False: return JSONResponse(status_code=401, content={\"message\": \"Invalid token\"}) # Prevents any functions if the token is invalid else: # Execute the intended code here To validate the token, the code firsts calls the function validate_student() : def validate_student(token): try: res = get_student_from_token(token) if res == \"Token Expired\": # Checks if the token is past its expiry date return False else: # Returns details in the form of a list return [res['name'], res['email'], res['id']] # If the token is invalid, return False except InvalidTokenError: return False # If the token cannot be decoded, return False except InvalidSignatureError: # Checks if the user has tried to use token injection, resulting in an invalid token return False To get the res variable, our code then decodes the token using the get_student_from_token(token: str) function: def get_student_from_token(token): payload = jwt.decode(token, SECRET_KEY, algorithms = [ALGORITHM]) expiry = payload.get('expiry') if datetime.utcnow() >= datetime.strptime(expiry, '%Y-%m-%d %H:%M:%S.%f'): # Compares the expiry date to the current date based on UCT return \"Token Expired\" else: return payload.get('details') # Returns the details as a dictionary of the name, email and UID This means that an expired or invalid token will immediately be rejected but a valid and correct token will be allowed. The app then performs all of its functions based on this data, allowing the app to extract the user's notes based on the OWNER_EMAIL property of each file, ensuring the privacy of user data and maintains the user experience. If the app returns a 401 error due to a bad token, the frontend intercepts this error and redirects the user to a login/sign-up page, as shown in the code: @Injectable() export class ErrorInterceptor implements HttpInterceptor { constructor(private router: Router, private route: ActivatedRoute) {} getChildRoute(route: ActivatedRoute): ActivatedRoute { while (route.firstChild) { route = route.firstChild; } return route; } intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> { const modifiedRequest = request.clone({ // Clones any incoming requests headers: request.headers.set('X-Requested-With', 'XMLHttpRequest'), withCredentials: true }); return next.handle(modifiedRequest).pipe( tap(() => {}, (err: any) => { if (err instanceof HttpErrorResponse) { // Checks if we have received an error if (err.status != 401 ) { return; } this.router.navigate(['/login']); // Prevents the request from going through and redirects to login page instead } })); } } This all ensures that the user can use the app easily, as they do not have to specify their ID when trying to use the app's functions whilst also preventing bad actors from accessing user data without protections. There is one exception to each API call having a token requirements. This is the cloud_check() function and is used by me to check if the API is responding to API calls. It is a simple get API call: @app.get(\"/api/cloud_check\") async def cloud_check(): return True And was initially used by my service provider to notify me if my API goes down. This is the only potential vulnerability evident to me, and is more dependent on my service provider's (Linode) protection to IPv6 & IPv4 calls to the server. When calling the method, it should return the following page: Storing user files When a user uploads a file, it is stored in our backend as a raw .PDF file. These files are not encrypted and are stored as their raw content. Their security is dependent upon the security of our service provider, Linode. The only feasible point of interception is when the file is being transmitted to the Backend from the Frontend. Before even allowing the data to be uploaded, we first have to verify its size. Gemini AI, like other AI converts input data and prompts to tokens that it can decode and understand. Similarly, input files are converted to tokens. There is a limit to the number of tokens that the Gemini AI can handle. To ensure that the files aren't too large, we use the count_tokens function of the API. This counts the tokens with the code: token_no = client.models.count_tokens(model=model_name,contents=client.files.upload(file=file_path, config={'display_name': 'test_data'})).total_tokens We then compare it to the limit, returning a boolean value depending on the result. However, we also have this statement encapsulated in a try...except... loop as if this request fails, then we know that the File is too large so we automatically reject it. NOTE: Files such as handwritten files have a lower capacity as they require more tokens and often cannot be decoded by the AI. To circumvent this, I am working on implementing a form of Vision AI to convert handwritten text to PDF Format. Volatile Data Current Notes The note that the user currently has selected is stored as a python array, as this allows for quick read/write times and this data does not need to be non-volatile as the user can simply reselect the notes they are using as the AI's context. Caching We also have caching in place. Previously, it would take anywhere from 30s-2min for the flashcard & question-answer functionality. To avoid this, any generated flashcards are stored in an array. Before generating them, the code checks if flashcards for the given notes already exist. If they do, then those flashcards are returned. If not, flashcards are generated and stored. Similarly, the code generates 10 questions at a time and stores them in an array relative to the file. When a question is requested, a question is removed from this list and sent. Once the number of cached questions drops below 3, a new set of questions are requested from the AI. This reduces the wait-time for the user and also makes it more cost-effective on my part as I do not have to pay for as many requests. Non-volatile data Notes The notes stored are non-volatile as they are stored as PDF data. Login Data User information such as their emails, password and UID's are stored in a sqlite3 database on the SSD of our server Tokens Tokens are actually stored on the browser, and sent to the backend on a per-request basis. The Backend simply verifies their validity therefore they are considered non-volatile.","title":"Backend"},{"location":"Backend/#data-structures","text":"All of the data sent from the frontend was sent in the form of JSON. To allow our backend to interpret this, we used custom BaseModels for each POST & GET call. For example, if our frontend called a login function such as: this.http.post(this.URL + \"/check_student_login\", {email: \"example@example.com\", username: \"example\", password: \"example\"}).subscribe((res: any) => { Where, email , username and password are the JSON parameters, then our backend model would look like: from pydantic import BaseModel # Module to create the models class PostLoginCheckStudentModel(BaseModel): email: str username: str password: str And the API would receive the call like so: @app.post(\"/api/check_student_login\") async def check_student_login_post(user: PostLoginCheckStudentModel): return check_student_login(user.email, user.password) # Calls a function on the backend These Data Structures are repeated throughout the API and are paramount to our data manipulation methods.","title":"Data Structures"},{"location":"Backend/#encryption","text":"Firstly, all passwords are encrypted before being stored in the backend. They are encrypted using Passlib's CryptContext module with 'bcrypt' as the schema. The password is encrypted with the following code: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def hash_password(password): # Take a plaintext password & convert it to ciphertext return pwd_context.hash(password) This will encrypt our password. It is extremely secure as each password is non-reversible. This results in the same input string having a variable output hash as the starting 'salt' used by the algorithm will be different. For example, an input password of 1234 could result in: - $2b$12$zProG7RawgHpdXZ9RfxYZ.pcwZy4N29C6mRzBb8yAFvoHc5TSSyZC - $2b$12$0DPNbWZDAX5fJl4pyBHnIuWiLk.2w/rxU/MnuKFznmjouUMjFxW5. - $2b$12$U6PDFiGrqooLxsnHJ7X9gehpzH3tLiI./BH8oj3HejMSyZvGHPneC - $2b$12$YJK4L0S8pcFKokWUYqf1VuDtjxy.KptvvBN9VTJIvTPTuwc36KwAe - $2b$12$MWwHq8PHskJqF2EoGOI60..J92SVyjD5FHVc4Ugbv7ZnD10Wso6yO - $2b$12$r5qvt.4ik//TSFaVWxWZ3uFGdmUXJL35.FXeeb2uDiWSQSZYQWv0i With there being an almost infinite number of potential passwords based on the starting 'salt'. To verify the value of our password, we do not reverse the hash. This is because reversing the hash is impossible. Instead, we use an inbuilt function that compares the plain-text to the hashed cipher-text. This functionality is used when authenticating a user during login and is done like such: from pydantic import BaseModel # Import module pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Identify the schema used def verify_password(unhashed, hashed): return pwd_context.verify(unhashed, hashed) # Returns a boolean This function compares the original 'salt' and 'work factor' (Number of encryption iterations) and calculates whether the hash could have been derived from this input. If the algorithm deems it possible, then a boolean value of True is returned, otherwise the function returns False .","title":"Encryption"},{"location":"Backend/#tokens","text":"When the frontend needs to make any request to the backend, it needs to provide a token. This token is valid for 7 days and stores the name , email and id of the user (student) that is currently logged in. When a user attempts to login, the details they input are checked against our database. If the email and password inputted align with an email and password from the database, a token is created and sent to the fronted. The token is created using the code: def get_user_token(student: Student): to_encode = { 'details' : {'name': student.name, 'email': student.email, 'id': student.id}, 'expiry' : str(datetime.utcnow() + timedelta(minutes = ACCESS_TOKEN_EXPIRE_MINUTES)) } return jwt.encode(to_encode, SECRET_KEY, algorithm = ALGORITHM) Where SECRET_KEY is a 256-bit custom code that is used for encryption and the algorithm is HS256. This token is then stored in the frontend. As a result of this, the user will not have to log in to the website on every occurrence of accessing the website. The fronted injects this token into every request as shown by the code: @Injectable() export class CookieInterceptor implements HttpInterceptor { private platformId = inject(PLATFORM_ID); intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> { // Intercepts an incoming request let token: string | undefined; if (isPlatformBrowser(this.platformId)) { token = document.cookie.split(\"; \").find((row) => row.startsWith(\"token=\"))?.split(\"=\")[1]; } // Extracts the token from the web-browser const modifiedRequest = request.clone({ withCredentials: true, setHeaders: token ? { 'token': token } : {} // Adds the token to the request }); return next.handle(modifiedRequest); // Sends the request to the API } } Once the backend receives this token, it then verifies it in every single function before even executing the intended request of the method call. This is done through the code: @app.post(\"/api/function_name\") async def function_name(request: Request): token_res = validate_student(request.headers.get('token')) # Runs a backend function to validate the token by extracting the user details and checking the expiry of the token if token_res == False: return JSONResponse(status_code=401, content={\"message\": \"Invalid token\"}) # Prevents any functions if the token is invalid else: # Execute the intended code here To validate the token, the code firsts calls the function validate_student() : def validate_student(token): try: res = get_student_from_token(token) if res == \"Token Expired\": # Checks if the token is past its expiry date return False else: # Returns details in the form of a list return [res['name'], res['email'], res['id']] # If the token is invalid, return False except InvalidTokenError: return False # If the token cannot be decoded, return False except InvalidSignatureError: # Checks if the user has tried to use token injection, resulting in an invalid token return False To get the res variable, our code then decodes the token using the get_student_from_token(token: str) function: def get_student_from_token(token): payload = jwt.decode(token, SECRET_KEY, algorithms = [ALGORITHM]) expiry = payload.get('expiry') if datetime.utcnow() >= datetime.strptime(expiry, '%Y-%m-%d %H:%M:%S.%f'): # Compares the expiry date to the current date based on UCT return \"Token Expired\" else: return payload.get('details') # Returns the details as a dictionary of the name, email and UID This means that an expired or invalid token will immediately be rejected but a valid and correct token will be allowed. The app then performs all of its functions based on this data, allowing the app to extract the user's notes based on the OWNER_EMAIL property of each file, ensuring the privacy of user data and maintains the user experience. If the app returns a 401 error due to a bad token, the frontend intercepts this error and redirects the user to a login/sign-up page, as shown in the code: @Injectable() export class ErrorInterceptor implements HttpInterceptor { constructor(private router: Router, private route: ActivatedRoute) {} getChildRoute(route: ActivatedRoute): ActivatedRoute { while (route.firstChild) { route = route.firstChild; } return route; } intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> { const modifiedRequest = request.clone({ // Clones any incoming requests headers: request.headers.set('X-Requested-With', 'XMLHttpRequest'), withCredentials: true }); return next.handle(modifiedRequest).pipe( tap(() => {}, (err: any) => { if (err instanceof HttpErrorResponse) { // Checks if we have received an error if (err.status != 401 ) { return; } this.router.navigate(['/login']); // Prevents the request from going through and redirects to login page instead } })); } } This all ensures that the user can use the app easily, as they do not have to specify their ID when trying to use the app's functions whilst also preventing bad actors from accessing user data without protections. There is one exception to each API call having a token requirements. This is the cloud_check() function and is used by me to check if the API is responding to API calls. It is a simple get API call: @app.get(\"/api/cloud_check\") async def cloud_check(): return True And was initially used by my service provider to notify me if my API goes down. This is the only potential vulnerability evident to me, and is more dependent on my service provider's (Linode) protection to IPv6 & IPv4 calls to the server. When calling the method, it should return the following page:","title":"Tokens"},{"location":"Backend/#storing-user-files","text":"When a user uploads a file, it is stored in our backend as a raw .PDF file. These files are not encrypted and are stored as their raw content. Their security is dependent upon the security of our service provider, Linode. The only feasible point of interception is when the file is being transmitted to the Backend from the Frontend. Before even allowing the data to be uploaded, we first have to verify its size. Gemini AI, like other AI converts input data and prompts to tokens that it can decode and understand. Similarly, input files are converted to tokens. There is a limit to the number of tokens that the Gemini AI can handle. To ensure that the files aren't too large, we use the count_tokens function of the API. This counts the tokens with the code: token_no = client.models.count_tokens(model=model_name,contents=client.files.upload(file=file_path, config={'display_name': 'test_data'})).total_tokens We then compare it to the limit, returning a boolean value depending on the result. However, we also have this statement encapsulated in a try...except... loop as if this request fails, then we know that the File is too large so we automatically reject it. NOTE: Files such as handwritten files have a lower capacity as they require more tokens and often cannot be decoded by the AI. To circumvent this, I am working on implementing a form of Vision AI to convert handwritten text to PDF Format.","title":"Storing user files"},{"location":"Backend/#volatile-data","text":"","title":"Volatile Data"},{"location":"Backend/#current-notes","text":"The note that the user currently has selected is stored as a python array, as this allows for quick read/write times and this data does not need to be non-volatile as the user can simply reselect the notes they are using as the AI's context.","title":"Current Notes"},{"location":"Backend/#caching","text":"We also have caching in place. Previously, it would take anywhere from 30s-2min for the flashcard & question-answer functionality. To avoid this, any generated flashcards are stored in an array. Before generating them, the code checks if flashcards for the given notes already exist. If they do, then those flashcards are returned. If not, flashcards are generated and stored. Similarly, the code generates 10 questions at a time and stores them in an array relative to the file. When a question is requested, a question is removed from this list and sent. Once the number of cached questions drops below 3, a new set of questions are requested from the AI. This reduces the wait-time for the user and also makes it more cost-effective on my part as I do not have to pay for as many requests.","title":"Caching"},{"location":"Backend/#non-volatile-data","text":"","title":"Non-volatile data"},{"location":"Backend/#notes","text":"The notes stored are non-volatile as they are stored as PDF data.","title":"Notes"},{"location":"Backend/#login-data","text":"User information such as their emails, password and UID's are stored in a sqlite3 database on the SSD of our server","title":"Login Data"},{"location":"Backend/#tokens_1","text":"Tokens are actually stored on the browser, and sent to the backend on a per-request basis. The Backend simply verifies their validity therefore they are considered non-volatile.","title":"Tokens"},{"location":"Core%20Functions/","text":"Summarisations Flashcards Question & Answers Custom Prompt","title":"Core Functions"},{"location":"Core%20Functions/#summarisations","text":"","title":"Summarisations"},{"location":"Core%20Functions/#flashcards","text":"","title":"Flashcards"},{"location":"Core%20Functions/#question-answers","text":"","title":"Question &amp; Answers"},{"location":"Core%20Functions/#custom-prompt","text":"","title":"Custom Prompt"},{"location":"Frontend/","text":"A well designed API needs a well-designed frontend to allow the user to use the API well. To do this, I had to utilise functions that had the user in mind. This included things such as Angular, Angular Material, and Google Icon Library. Router Firstly, we needed to allow users to navigate through the pages. This was done through the use of angular's routers. Angular is a component-based framework. This means that each page is its own component. To allow for navigation and appropriate displaying of the correct component, we have to code the correct paths in. This is done like so: export const routes: Routes = [ { path: '', component: DashboardComponent // DASHBOARD COMPONENT }, { path: 'custom-prompt', component: CustomPromptComponent }, { path: 'flashcards', component: FlashcardsComponent }, { path: 'question-answer', component: QuestionAnswerComponent }, { path: 'summariser', component: SummariserComponent }, { path: 'login', component: LoginComponent }, { path: 'sign-up', component: SignUpComponent }, { path: 'student-profile', component: ViewStudentProfileComponent }, { path: 'add-section', component: AddSectionComponent } ]; Where each path is the URL path. So the FlashcardComponent could be found at the URL https://studdybuddy.app/flashcards This also allows for navigation within the code. For example, if a user is not logged in, the code automatically navigates them to the login page with the code: this.router.navigate(['/login']); Interceptors When something is not correct, for example if a user is not logged in or there is an error returned by the backend, the code has to intercept it to ensure that the frontend does not view these errors and allow them to correct the mistake without confusing them. Cookie Firstly, we have the cookie interceptor component. The code is: import { Injectable, inject } from '@angular/core'; import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http'; import { Observable } from 'rxjs'; import { PLATFORM_ID } from '@angular/core'; import { isPlatformBrowser } from '@angular/common'; @Injectable() export class CookieInterceptor implements HttpInterceptor { private platformId = inject(PLATFORM_ID); intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> { let token: string | undefined; if (isPlatformBrowser(this.platformId)) { token = document.cookie.split(\"; \") .find((row) => row.startsWith(\"token=\")) ?.split(\"=\")[1]; } const modifiedRequest = request.clone({ withCredentials: true, setHeaders: token ? { 'token': token } : {} }); return next.handle(modifiedRequest); } } This code extracts a token from the user's browser storage and automatically adds it to every request that is sent. This ensure that the user is authenticated to prevent injection to the Gemini API. Error If the backend returns an error, particularly a 401 error indicating that a user is not logged in (from an invalid cookie), the frontend intercepts it to prevent the app stopping. The code is: import { Injectable } from '@angular/core'; import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http'; import { Observable } from 'rxjs'; import { Router , ActivatedRoute, NavigationEnd} from '@angular/router'; import {tap, filter} from 'rxjs/operators'; @Injectable() export class ErrorInterceptor implements HttpInterceptor { constructor(private router: Router, private route: ActivatedRoute) {} getChildRoute(route: ActivatedRoute): ActivatedRoute { while (route.firstChild) { route = route.firstChild; } return route; } intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> { const modifiedRequest = request.clone({ headers: request.headers.set('X-Requested-With', 'XMLHttpRequest'), withCredentials: true }); return next.handle(modifiedRequest).pipe( tap(() => {}, (err: any) => { if (err instanceof HttpErrorResponse) { if (err.status != 401 ) { return; } this.router.navigate(['/login']); } })); } } Here, the code intercepts all incoming requests. If the response has a code of 401, it automatically redirects to the login page and discards the contents of the request. This prevents an error from reaching the user and causing the app to halt. Snackbars Some of these requests take time. To let the user know, I used angular-material's snackbars to prevent them from leaving the page prematurely due to a request taking time. For example, below is the snackbar that appears when a user requests to create flashcards. This is the snackbar that appears when the user tries to create flashcards, ensuring that the user is not confused by wait times. Additionally, the snackbar can also be used to display errors. For example, if the user does not have an existing account and tries to login, the app returns a separate snackbar, as shown below: This indicates to the user that they need to sign in. Flashcards When the flashcards are requested, we use a custom-built component that was taken from a StackBlitz repository. This can be seen below: This creates a friendly environment for the user to interact with their flashcards. There is a display of the flashcard they are currently looking at and there is buttons to flip between the various flashcards. Additionally, the user can just click the flashcard to view its behind side. Animations When flipping between the sides of the flashcards, there is an animations which can be seen below: This brings a better user experience as it adds fluidity to the app. The code to do this is the following: animations: [ trigger('flipState', [ // Triggered when the user clicks the flashcards state('active', style({ transform: 'rotateY(179deg)' })), state('inactive', style({ transform: 'rotateY(0)' })), transition('active => inactive', animate('500ms ease-out')), transition('inactive => active', animate('500ms ease-in')) ]) ] HTTP Requests Every single component makes an HTTP request. We do this with the general format of the GET/POST Request as shown in the code: // For a POST Request this.http.post(this.URL + \"API_REQUEST\", DATA).subscribe((res: any) => { }) // For a GET Request this.http.get(this.URL + \"/API_REQUEST\").subscribe((res: any) => { }) Angular Material I wanted the app to look good. To do this, I used premade components from a proprietary npm module called Angular Material . This is where I have taken various components such as: The NavBar The Side Tree The aforementioned snack bar And many more This creates fluidity and cleanliness in the app and also adds a dynamic layer as these components are scaleable to the size of their display, creating a better user experience Icons I used the google Icon library to simplify the purpose of some buttons into images rather than words to reduce the page's clutter. They have been used in various places such as: - The menu Row - Each node on the side bar","title":"Frontend"},{"location":"Frontend/#router","text":"Firstly, we needed to allow users to navigate through the pages. This was done through the use of angular's routers. Angular is a component-based framework. This means that each page is its own component. To allow for navigation and appropriate displaying of the correct component, we have to code the correct paths in. This is done like so: export const routes: Routes = [ { path: '', component: DashboardComponent // DASHBOARD COMPONENT }, { path: 'custom-prompt', component: CustomPromptComponent }, { path: 'flashcards', component: FlashcardsComponent }, { path: 'question-answer', component: QuestionAnswerComponent }, { path: 'summariser', component: SummariserComponent }, { path: 'login', component: LoginComponent }, { path: 'sign-up', component: SignUpComponent }, { path: 'student-profile', component: ViewStudentProfileComponent }, { path: 'add-section', component: AddSectionComponent } ]; Where each path is the URL path. So the FlashcardComponent could be found at the URL https://studdybuddy.app/flashcards This also allows for navigation within the code. For example, if a user is not logged in, the code automatically navigates them to the login page with the code: this.router.navigate(['/login']);","title":"Router"},{"location":"Frontend/#interceptors","text":"When something is not correct, for example if a user is not logged in or there is an error returned by the backend, the code has to intercept it to ensure that the frontend does not view these errors and allow them to correct the mistake without confusing them.","title":"Interceptors"},{"location":"Frontend/#cookie","text":"Firstly, we have the cookie interceptor component. The code is: import { Injectable, inject } from '@angular/core'; import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http'; import { Observable } from 'rxjs'; import { PLATFORM_ID } from '@angular/core'; import { isPlatformBrowser } from '@angular/common'; @Injectable() export class CookieInterceptor implements HttpInterceptor { private platformId = inject(PLATFORM_ID); intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> { let token: string | undefined; if (isPlatformBrowser(this.platformId)) { token = document.cookie.split(\"; \") .find((row) => row.startsWith(\"token=\")) ?.split(\"=\")[1]; } const modifiedRequest = request.clone({ withCredentials: true, setHeaders: token ? { 'token': token } : {} }); return next.handle(modifiedRequest); } } This code extracts a token from the user's browser storage and automatically adds it to every request that is sent. This ensure that the user is authenticated to prevent injection to the Gemini API.","title":"Cookie"},{"location":"Frontend/#error","text":"If the backend returns an error, particularly a 401 error indicating that a user is not logged in (from an invalid cookie), the frontend intercepts it to prevent the app stopping. The code is: import { Injectable } from '@angular/core'; import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http'; import { Observable } from 'rxjs'; import { Router , ActivatedRoute, NavigationEnd} from '@angular/router'; import {tap, filter} from 'rxjs/operators'; @Injectable() export class ErrorInterceptor implements HttpInterceptor { constructor(private router: Router, private route: ActivatedRoute) {} getChildRoute(route: ActivatedRoute): ActivatedRoute { while (route.firstChild) { route = route.firstChild; } return route; } intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> { const modifiedRequest = request.clone({ headers: request.headers.set('X-Requested-With', 'XMLHttpRequest'), withCredentials: true }); return next.handle(modifiedRequest).pipe( tap(() => {}, (err: any) => { if (err instanceof HttpErrorResponse) { if (err.status != 401 ) { return; } this.router.navigate(['/login']); } })); } } Here, the code intercepts all incoming requests. If the response has a code of 401, it automatically redirects to the login page and discards the contents of the request. This prevents an error from reaching the user and causing the app to halt.","title":"Error"},{"location":"Frontend/#snackbars","text":"Some of these requests take time. To let the user know, I used angular-material's snackbars to prevent them from leaving the page prematurely due to a request taking time. For example, below is the snackbar that appears when a user requests to create flashcards. This is the snackbar that appears when the user tries to create flashcards, ensuring that the user is not confused by wait times. Additionally, the snackbar can also be used to display errors. For example, if the user does not have an existing account and tries to login, the app returns a separate snackbar, as shown below: This indicates to the user that they need to sign in.","title":"Snackbars"},{"location":"Frontend/#flashcards","text":"When the flashcards are requested, we use a custom-built component that was taken from a StackBlitz repository. This can be seen below: This creates a friendly environment for the user to interact with their flashcards. There is a display of the flashcard they are currently looking at and there is buttons to flip between the various flashcards. Additionally, the user can just click the flashcard to view its behind side.","title":"Flashcards"},{"location":"Frontend/#animations","text":"When flipping between the sides of the flashcards, there is an animations which can be seen below: This brings a better user experience as it adds fluidity to the app. The code to do this is the following: animations: [ trigger('flipState', [ // Triggered when the user clicks the flashcards state('active', style({ transform: 'rotateY(179deg)' })), state('inactive', style({ transform: 'rotateY(0)' })), transition('active => inactive', animate('500ms ease-out')), transition('inactive => active', animate('500ms ease-in')) ]) ]","title":"Animations"},{"location":"Frontend/#http-requests","text":"Every single component makes an HTTP request. We do this with the general format of the GET/POST Request as shown in the code: // For a POST Request this.http.post(this.URL + \"API_REQUEST\", DATA).subscribe((res: any) => { }) // For a GET Request this.http.get(this.URL + \"/API_REQUEST\").subscribe((res: any) => { })","title":"HTTP Requests"},{"location":"Frontend/#angular-material","text":"I wanted the app to look good. To do this, I used premade components from a proprietary npm module called Angular Material . This is where I have taken various components such as: The NavBar The Side Tree The aforementioned snack bar And many more This creates fluidity and cleanliness in the app and also adds a dynamic layer as these components are scaleable to the size of their display, creating a better user experience","title":"Angular Material"},{"location":"Frontend/#icons","text":"I used the google Icon library to simplify the purpose of some buttons into images rather than words to reduce the page's clutter. They have been used in various places such as: - The menu Row - Each node on the side bar","title":"Icons"},{"location":"Improvements/","text":"Snack Bar addition Increased Speed Flashcard Caching Question & Answer Caching GDPR Alignment Account Deletion Note Deletion Rich Text support","title":"Improvements"},{"location":"Improvements/#snack-bar-addition","text":"","title":"Snack Bar addition"},{"location":"Improvements/#increased-speed","text":"","title":"Increased Speed"},{"location":"Improvements/#flashcard-caching","text":"","title":"Flashcard Caching"},{"location":"Improvements/#question-answer-caching","text":"","title":"Question &amp; Answer Caching"},{"location":"Improvements/#gdpr-alignment","text":"","title":"GDPR Alignment"},{"location":"Improvements/#account-deletion","text":"","title":"Account Deletion"},{"location":"Improvements/#note-deletion","text":"","title":"Note Deletion"},{"location":"Improvements/#rich-text-support","text":"","title":"Rich Text support"},{"location":"Learning/","text":"Angular NGINX Nohup Linux Encryption JWT Tokens","title":"Learning"},{"location":"Learning/#angular","text":"","title":"Angular"},{"location":"Learning/#nginx","text":"","title":"NGINX"},{"location":"Learning/#nohup","text":"","title":"Nohup"},{"location":"Learning/#linux","text":"","title":"Linux"},{"location":"Learning/#encryption","text":"","title":"Encryption"},{"location":"Learning/#jwt","text":"","title":"JWT"},{"location":"Learning/#tokens","text":"","title":"Tokens"}]}